import { Telegraf, Markup, Context } from "telegraf";
import { session } from "telegraf";
import PomodoroTimer from './timer';

// –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const userTimers = new Map<number, PomodoroTimer>();

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ (24 —á–∞—Å–∞)
setInterval(() => {
  const now = Date.now();
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
  Array.from(userTimers.entries()).forEach(([chatId, timer]) => {
    if (timer.isTimerWorking()) {
      // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      return;
    }
    
    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, —É–¥–∞–ª—è–µ–º
    const lastActivity = timer.getLastActivityTime();
    if (now - lastActivity > 24 * 60 * 60 * 1000) {
      userTimers.delete(chatId);
    }
  });
}, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å

export interface SessionContext extends Context {
  session: {
    statusMessageId?: number;
  };
}

export function setupBot(bot: Telegraf<SessionContext>) {
  bot.use(session({
    defaultSession: () => ({})
  }));

  const menuKeyboard = Markup.keyboard([
    ["–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä"],
    ["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä"],
    ["–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"],
    ["–ü—Ä–æ –ü–æ–º–æ–¥–æ—Ä–æ –¢–∞–π–º–µ—Ä"]
  ]).resize();

  bot.start((ctx) => {
    return ctx.reply(
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pomodoro Timer Bot!",
      menuKeyboard
    );
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞
  const getOrCreateTimer = (chatId: number) => {
    if (!userTimers.has(chatId)) {
      userTimers.set(chatId, new PomodoroTimer());
    }
    return userTimers.get(chatId)!;
  };

  bot.hears("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId) return;
    
    const timer = getOrCreateTimer(chatId);
    timer.startTimer();
    
    const message = await ctx.reply("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω! 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞—á–∞–ª–∏—Å—å üçÖ\n\n" + timer.getStatus());
    console.log('Start timer message sent:', message);
    
    ctx.session.statusMessageId = message.message_id;
  });

  bot.hears("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä", async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId) return;
    
    const timer = userTimers.get(chatId);
    if (!timer) return;
    
    timer.stopTimer();
    
    if (ctx.session.statusMessageId) {
      delete ctx.session.statusMessageId;
    }
    
    const reply = await ctx.reply("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    console.log('Stop timer reply:', reply);
  });

  bot.hears("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId) return;
    
    const timer = userTimers.get(chatId);
    const status = timer?.isTimerWorking() ?
      "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n" + timer.getStatus() :
      "–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
      
    const reply = await ctx.reply(status);
    console.log('Status reply:', reply);
  });

  bot.hears("–ü—Ä–æ –ü–æ–º–æ–¥–æ—Ä–æ –¢–∞–π–º–µ—Ä", async (ctx) => {
    const reply = await ctx.reply(
      "Pomodoro Timer - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ –º–µ—Ç–æ–¥—É –ü–æ–º–æ–¥–æ—Ä–æ:\n\n" +
        "üçÖ 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã\n‚òï 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞\n" +
        "–ü–æ—Å–ª–µ 4 —Ü–∏–∫–ª–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç"
    );
    console.log('About bot reply:', reply);
  });
}