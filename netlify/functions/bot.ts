import "dotenv/config";
import { Handler } from '@netlify/functions';
import { Telegraf, Markup, Context } from "telegraf";
import { session } from "telegraf";
import PomodoroTimer from '../../timer';

interface SessionContext extends Context {
  session: {
    statusInterval?: NodeJS.Timeout;
    statusMessageId?: number;
  };
}

const token = process.env.BOT_TOKEN;
if (!token) {
  throw new Error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

const bot = new Telegraf<SessionContext>(token);
const pomodoroTimer = new PomodoroTimer();

bot.use(session({
  defaultSession: () => ({})
}));

const menuKeyboard = Markup.keyboard([
  ["–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä"],
  ["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä"],
  ["–ü—Ä–æ –ü–æ–º–æ–¥–æ—Ä–æ –¢–∞–π–º–µ—Ä"]
]).resize();

bot.start((ctx) => {
  return ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pomodoro Timer Bot!",
    menuKeyboard
  );
});

bot.hears("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", async (ctx) => {
  pomodoroTimer.startTimer();
  
  const message = await ctx.reply("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω! 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞—á–∞–ª–∏—Å—å üçÖ\n\n" + pomodoroTimer.getStatus());
  console.log('Start timer message sent:', message);
  
  ctx.session.statusMessageId = message.message_id;
  
  const statusInterval = setInterval(async () => {
    try {
      const chatId = ctx.chat?.id;
      if (!chatId) {
        console.error('Chat ID is undefined');
        return;
      }
      
      console.log('Editing message for chat:', chatId);
      const result = await ctx.telegram.editMessageText(
        chatId,
        ctx.session.statusMessageId,
        undefined,
        "–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω! üçÖ\n\n" + pomodoroTimer.getStatus()
      );
      console.log('Message edit result:', result);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
    }
  }, 1000);
  
  ctx.session.statusInterval = statusInterval;
});

bot.hears("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä", async (ctx) => {
  pomodoroTimer.stopTimer();
  
  if (ctx.session.statusInterval) {
    clearInterval(ctx.session.statusInterval);
    delete ctx.session.statusInterval;
  }
  
  if (ctx.session.statusMessageId) {
    delete ctx.session.statusMessageId;
  }
  
  const reply = await ctx.reply("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  console.log('Stop timer reply:', reply);
});

bot.hears("–ü—Ä–æ –ü–æ–º–æ–¥–æ—Ä–æ –¢–∞–π–º–µ—Ä", async (ctx) => {
  const reply = await ctx.reply(
    "Pomodoro Timer - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ –º–µ—Ç–æ–¥—É –ü–æ–º–æ–¥–æ—Ä–æ:\n\n" +
      "üçÖ 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã\n‚òï 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞\n" +
      "–ü–æ—Å–ª–µ 4 —Ü–∏–∫–ª–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç"
  );
  console.log('About bot reply:', reply);
});

export const handler: Handler = async (event) => {
  if (!event.body) {
    return { statusCode: 400, body: 'Bad Request' };
  }

  try {
    const update = JSON.parse(event.body);
    console.log('Update received:', JSON.stringify(update, null, 2));
    
    try {
      await bot.handleUpdate(update);
      console.log('Update processed successfully');
    } catch (error) {
      console.error('Error in bot.handleUpdate:', error);
    }
    
    await new Promise(resolve => setTimeout(resolve, 1500));
    console.log('Response delay completed');
    
    return { statusCode: 200, body: '' };
  } catch (e) {
    console.error('Error handling update:', e);
    return { statusCode: 500, body: 'Internal Server Error' };
  }
};